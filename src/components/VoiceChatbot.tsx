import { useState } from "react";
import { GeminiClient } from "../services/GeminiClient";
import { motion, AnimatePresence } from "framer-motion";
import ReactMarkdown from "react-markdown";

const gemini = new GeminiClient("AIzaSyBOyExUS1i0kvI7jhV7MuYl1na1nLI4wNg");

const VoiceChatbot: React.FC = () => {
  const [input, setInput] = useState("");
  const [messages, setMessages] = useState<
    { role: "user" | "bot"; text: string }[]
  >([]);
  const [speaking, setSpeaking] = useState(false);
  const [tab, setTab] = useState<"text" | "voice">("text");
  const [loading, setLoading] = useState(false);
  const [modalText, setModalText] = useState<string | null>(null);
  const [copyText, setCopyText] = useState<string>("Copy");

  const handleTabChange = (newTab: "text" | "voice") => {
    if (loading) return;
    setTab(newTab);
    setInput("");
    setMessages([]);
    setSpeaking(false);
    setLoading(false);
  };

  const speak = (text: string) => {
    if (typeof window !== "undefined" && "speechSynthesis" in window) {
      setSpeaking(true);
      const utter = new window.SpeechSynthesisUtterance(text);
      utter.lang = "vi-VN";
      utter.rate = 1;
      utter.onend = () => setSpeaking(false);
      window.speechSynthesis.speak(utter);
    }
  };

  const handleSend = async () => {
    if (!input.trim()) return;
    setMessages((prev) => [...prev, { role: "user", text: input }]);
    setLoading(true);

    try {
      let prompt =
        "B·∫°n h√£y d·ª±a v√†o gi√°o tr√¨nh Ch·ªß Nghƒ©a X√£ H·ªôi Khoa H·ªçc 2021. " +
        "N·∫øu kh√¥ng t√¨m th·∫•y th√¥ng tin h·ª£p l·ªá ho·∫∑c li√™n quan trong gi√°o tr√¨nh, h√£y tr·∫£ l·ªùi r√µ: " +
        "'Hi·ªán t·∫°i t√¥i kh√¥ng th·ªÉ t√¨m th·∫•y c√°c th√¥ng tin li√™n quan trong gi√°o tr√¨nh.'\n";

      if (tab === "text") {
        prompt += `Tr·∫£ l·ªùi c√¢u h·ªèi n√†y m·ªôt c√°ch ƒë·∫ßy ƒë·ªß, r√µ r√†ng, c√≥ th·ªÉ ch·ªâ r√µ c√°c ch∆∞∆°ng trong gi√°o tr√¨nh m√† b·∫°n tham kh·∫£o: 
${input}`;
      } else {
        prompt += `Tr·∫£ l·ªùi c√¢u h·ªèi n√†y theo phong c√°ch g·∫ßn g≈©i, d·ªÖ hi·ªÉu, c√≥ th·ªÉ th√™m v√≠ d·ª• minh h·ªça ƒë·ªùi th∆∞·ªùng ho·∫∑c so s√°nh vui v·∫ª 
            ƒë·ªÉ ng∆∞·ªùi ƒë·ªçc c·∫£m th·∫•y h·ª©ng th√∫ h∆°n. Tuy nhi√™n v·∫´n ƒë·∫£m b·∫£o t√≠nh ch√≠nh x√°c v√† ƒë·∫ßy ƒë·ªß n·ªôi dung, 
            kh√¥ng ƒë∆∞·ª£c b·ªè s√≥t √Ω ch√≠nh trong gi√°o tr√¨nh. Kh√¥ng ƒë∆∞·ª£c s·ª≠ d·ª•ng t·ª´ vi·∫øt t·∫Øt, 
            h√£y vi·∫øt ƒë·∫ßy ƒë·ªß t·∫•t c·∫£ c√°c kh√°i ni·ªám v√† c·ª•m t·ª´ (v√≠ d·ª•: thay v√¨ CNXH th√¨ ph·∫£i vi·∫øt l√† "Ch·ªß nghƒ©a x√£ h·ªôi"). 
            N·∫øu c√≥ th·ªÉ, h√£y ch·ªâ r√µ ch∆∞∆°ng trong gi√°o tr√¨nh b·∫°n ƒë√£ tham kh·∫£o: 
            ${input}`;
      }

      const response = await gemini.ask(prompt);

      setMessages((prev) => [...prev, { role: "bot", text: response }]);

      if (tab === "voice") {
        speak(response);
      }
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    } catch (err: any) {
      setMessages((prev) => [
        ...prev,
        { role: "bot", text: "L·ªói khi g·ªçi API: " + err.message },
      ]);
    } finally {
      setLoading(false);
      setInput("");
    }
  };

  return (
    <>
      <motion.div
        className="w-full max-w-2xl min-h-[400px] flex flex-col bg-white/80 rounded-2xl shadow-2xl p-8 backdrop-blur border border-white/30 resize-y overflow-auto transition-all duration-300"
        initial={{ opacity: 0, y: 40 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.7, delay: 0.2 }}
      >
        <h2 className="text-2xl font-bold mb-4 text-gray-800 text-center">
          Chatbot AI Gemini
        </h2>
        <div className="flex gap-4 mb-6 justify-center">
          <button
            className={`px-6 py-2 rounded-lg border font-semibold text-lg transition-all duration-200 ${
              tab === "text"
                ? "bg-blue-500 text-white shadow"
                : "bg-white text-blue-500 border-blue-500 hover:bg-blue-50"
            } ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
            onClick={() => handleTabChange("text")}
            disabled={loading}
          >
            Tr·∫£ l·ªùi vƒÉn b·∫£n
          </button>
          <button
            className={`px-6 py-2 rounded-lg border font-semibold text-lg transition-all duration-200 ${
              tab === "voice"
                ? "bg-blue-500 text-white shadow"
                : "bg-white text-blue-500 border-blue-500 hover:bg-blue-50"
            } ${loading ? "opacity-50 cursor-not-allowed" : ""}`}
            onClick={() => handleTabChange("voice")}
            disabled={loading}
          >
            Tr·∫£ l·ªùi gi·ªçng n√≥i
          </button>
        </div>

        <div className="flex-1 min-h-[180px] max-h-[500px] overflow-y-auto flex flex-col gap-3 mb-6 transition-all duration-300">
          {tab === "text" ? (
            <>
              {messages.length === 0 && (
                <div className="text-gray-500 text-center mt-12 text-base select-none">
                  H√£y h·ªèi b·∫•t k·ª≥ ƒëi·ªÅu g√¨ b·∫°n mu·ªën!
                </div>
              )}
              {messages.map((msg, idx) => (
                <div
                  key={idx}
                  className={`flex items-start gap-3 ${
                    msg.role === "user" ? "justify-end" : "justify-start"
                  }`}
                >
                  {msg.role === "bot" && (
                    <span className="w-8 h-8 flex items-center justify-center rounded-full bg-gray-200">
                      ü§ñ
                    </span>
                  )}
                  <motion.div
                    className={`max-w-[85%] px-5 py-3 rounded-2xl text-base leading-relaxed shadow-sm cursor-pointer ${
                      msg.role === "user"
                        ? "bg-blue-500 text-white self-end rounded-br-none"
                        : "bg-white text-gray-900 self-start border border-gray-200 rounded-bl-none"
                    }`}
                    initial={{ opacity: 0, x: msg.role === "user" ? 40 : -40 }}
                    animate={{ opacity: 1, x: 0 }}
                    transition={{ duration: 0.3 }}
                    onClick={() => msg.role === "bot" && setModalText(msg.text)}
                  >
                    {msg.role === "user" ? (
                      msg.text
                    ) : (
                      <div className="prose prose-sm sm:prose-base lg:prose-lg max-w-none line-clamp-4">
                        <ReactMarkdown>{msg.text}</ReactMarkdown>
                      </div>
                    )}
                  </motion.div>
                  {msg.role === "user" && (
                    <span className="w-8 h-8 flex items-center justify-center rounded-full bg-blue-500 text-white">
                      üë§
                    </span>
                  )}
                </div>
              ))}
            </>
          ) : (
            <div className="flex flex-col items-center justify-center h-full min-h-[180px]">
              {speaking ? (
                <div className="flex flex-col items-center justify-center w-full h-full">
                  <span className="text-6xl mb-2 animate-pulse text-blue-500">
                    üîä
                  </span>
                  <span className="text-lg text-blue-600 font-semibold mb-4">
                    ƒêang ph√°t gi·ªçng n√≥i...
                  </span>
                  <button
                    className="px-6 py-2 rounded-lg bg-red-500 text-white font-semibold shadow hover:bg-red-600 transition"
                    onClick={() => {
                      if (
                        typeof window !== "undefined" &&
                        "speechSynthesis" in window
                      ) {
                        window.speechSynthesis.cancel();
                        setSpeaking(false);
                      }
                    }}
                  >
                    D·ª´ng n√≥i
                  </button>
                </div>
              ) : (
                <span className="text-gray-400 text-base select-none">
                  Nh·∫≠p c√¢u h·ªèi ƒë·ªÉ nghe tr·∫£ l·ªùi b·∫±ng gi·ªçng n√≥i!
                </span>
              )}
            </div>
          )}
        </div>

        <div className="flex items-center gap-3 mt-auto">
          <input
            className="flex-1 px-4 py-2 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-blue-400 bg-white text-base"
            placeholder="Nh·∫≠p c√¢u h·ªèi..."
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => e.key === "Enter" && handleSend()}
            disabled={loading}
          />
          <button
            className="p-3 rounded-full bg-blue-500 hover:bg-blue-600 transition text-white shadow disabled:opacity-60 disabled:cursor-not-allowed"
            onClick={handleSend}
            aria-label="Send"
            disabled={loading || !input.trim()}
          >
            {loading ? (
              <span className="w-5 h-5 animate-spin border-2 border-white border-t-transparent rounded-full inline-block"></span>
            ) : (
              <svg
                className="w-5 h-5"
                fill="none"
                stroke="currentColor"
                strokeWidth="2"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M22 2L11 13"
                ></path>
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  d="M22 2L15 22l-4-9-9-4 20-7z"
                ></path>
              </svg>
            )}
          </button>
        </div>
      </motion.div>

      <AnimatePresence>
        {modalText && (
          <motion.div
            className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4"
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            exit={{ opacity: 0 }}
            onClick={() => setModalText(null)}
          >
            <motion.div
              className="bg-white rounded-2xl shadow-xl max-w-3xl w-full max-h-[80vh] overflow-y-auto p-6 relative"
              initial={{ scale: 0.8, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              exit={{ scale: 0.8, opacity: 0 }}
            >
              <button
                className="absolute top-3 right-3 text-gray-500 hover:text-gray-700"
                onClick={() => setModalText(null)}
              >
                ‚úñ
              </button>
              <div className="prose prose-base lg:prose-lg max-w-none">
                <ReactMarkdown>{modalText}</ReactMarkdown>
              </div>
              <div className="mt-4 flex justify-end">
                <button
                  className="px-4 py-2 rounded-lg bg-blue-500 text-white hover:bg-blue-600"
                  onClick={() => {
                    navigator.clipboard.writeText(modalText);
                    setCopyText("Copied!");
                    setTimeout(() => setCopyText("Copy"), 2000);
                  }}
                >
                  {copyText}
                </button>
              </div>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
};

export default VoiceChatbot;
